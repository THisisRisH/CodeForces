import java.io.BufferedReader;
import java.lang.*;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.*;
import java.util.LinkedList;

public class CEdu{
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    static void sort(long[] arr) {
        ArrayList<Long> a = new ArrayList<>();
        for (long i : arr) {
            a.add(i);
        }
        Collections.sort(a);
        for (int i = 0; i < a.size(); i++) {
            arr[i] = a.get(i);
        }
    }
    static boolean get(char[] ch, int i, long k) {
        long ope = 0;
        for(int j = i; j >=0; j--) {
            long ele = ((ch[j]-'0') + ope)%10;
            long req = 10 - ele;
            if(req == 10) {
                req = 0;
            }
            if(ope+req <= k) {
                ope = ope + req;
                if(j == 0) {
                    return true;

                }
            }else {
                return false;
            }
        }
        return false;
    }
    static void solve(long a, long b, long c) {
        System.out.println((a|b) & (b|c) & (c|a));
    }
    static long get(long[] arr , int low, int high) {
        long len = high-low+1;
        for(int i = low; i <= high; i++) {
            if(arr[i] == 0) {
                len++;
            }
        }
        return len;
    }
    public static void main(String[] args) throws Exception {
        FastReader sc = new FastReader();
        int t = sc.nextInt();
        test: while(t-- > 0) {
            int n = sc.nextInt();
            long[] arr = new long[n];

            for(int i = 0; i < n; i++) {
                arr[i] = sc.nextLong();

            }
            long even = 0;
            long odd = 0;
            long ans = 0;
            long count = 0;
            boolean found = false;
            for(int i = 1; i < n-1; i++) {
                if(arr[i] % 2 != 0) {
                    odd++;

                }else {
                    even++;
                }
               if(arr[i] >= 2) {

                   found = true;
               }
            }
            if(found == false) {
                System.out.println("-1");
                continue test;
            }
            if(n-2 == 1 && odd == 1) {
                System.out.println("-1");
                continue test;
            }
                for(int i = 1; i < n-1; i++) {
                    double ele = arr[i];
                    ans += (long) Math.ceil(ele / 2.0);
                }
                    System.out.println(ans);


        }
    }
}
