import java.io.BufferedReader;
import java.lang.*;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.util.*;
import java.util.LinkedList;

public class CEdu {
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    static void sort(long[] arr) {
        ArrayList<Long> a = new ArrayList<>();
        for (long i : arr) {
            a.add(i);
        }
        Collections.sort(a);
        for (int i = 0; i < a.size(); i++) {
            arr[i] = a.get(i);
        }
    }

    static boolean get(char[] ch, int i, long k) {
        long ope = 0;
        for (int j = i; j >= 0; j--) {
            long ele = ((ch[j] - '0') + ope) % 10;
            long req = 10 - ele;
            if (req == 10) {
                req = 0;
            }
            if (ope + req <= k) {
                ope = ope + req;
                if (j == 0) {
                    return true;

                }
            } else {
                return false;
            }
        }
        return false;
    }

    static void solve(long a, long b, long c) {
        System.out.println((a | b) & (b | c) & (c | a));
    }

    static long get(long[] arr, int low, int high) {
        long len = high - low + 1;
        for (int i = low; i <= high; i++) {
            if (arr[i] == 0) {
                len++;
            }
        }
        return len;
    }

    public static void main(String[] args) throws Exception {
        FastReader sc = new FastReader();
        int t = sc.nextInt();
        test:
        while (t-- > 0) {
            String s = sc.nextLine();
            HashSet<Character> ss = new HashSet<>();
            int i = 0;
            StringBuilder ans = new StringBuilder();
            StringBuilder ans2 = new StringBuilder();
            while(i < s.length()) {
                if(s.charAt(i) == 'G'){
                    if(!ss.contains('g')) {
                        System.out.println("NO");
                        continue test;
                    }
                }
                else if(s.charAt(i) == 'R'){
                    if(!ss.contains('r')){
                        System.out.println("NO");
                        continue test;
                    }

                }
                else if(s.charAt(i) == 'B') {
                    if(!ss.contains('b')) {
                        System.out.println("NO");
                        continue test;
                    }
                }else {
                    ss.add(s.charAt(i));
                }
                i++;
            }
            System.out.println("YES");
            }
        }
    }


